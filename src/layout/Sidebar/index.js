/* eslint-disable no-useless-constructor */import React, {Component} from "react"import {connect} from "react-redux"import { withRouter } from 'react-router'import Utils from "./../../utils"import { Menu } from 'antd';import path from "path"import {Link} from "react-router-dom";const SubMenu = Menu.SubMenu;function SubMenuTitle(props) {  return(<span>		{      props.icon && <i className={'iconfont side-icon '+ props.icon} />    }    <span className={'submenu-title-span'}>{props.title || ""}</span>	</span>)}function  resolvePath(routePath, basePath){  return path.resolve(basePath, routePath)}function hasOneShowingChild(item){  let children = item.children || [];  const showingChildren = children.filter(item => {    return !item.hidden  })  return showingChildren.length === 0}class Sidebar extends Component {    constructor (props) {    	super(props)	    this.state = {    		keys: []	    }	    this.tapLink = this.tapLink.bind(this);    }    componentDidMount(){      const {location} = this.props;        let paths =  Utils.getPathArrByPath(location.pathname)      let keys = Utils.getOpenKeysByPaths(paths)      this.setState({        keys: keys      })    }    tapLink(e){      let {history} = this.props;      history.replace(e.item.props.path);    }	  renderMenuItem(route, basePath){      if(hasOneShowingChild(route)){        return (          <Menu.Item key={basePath} name={222} path={basePath} onClick={this.tapLink}>            {              SubMenuTitle({icon: route.meta && route.meta.icon, title: route.name})            }          </Menu.Item>        )      }      return (        <SubMenu key={resolvePath(route.path, basePath)} title={SubMenuTitle({icon: route.meta && route.meta.icon, title: route.name})}>          {route.children.map(            item => this.renderMenuItem(item, resolvePath(item.path, route.path))          )}        </SubMenu>      )    }    render() {    	const {routes, sidebarOpen, theme, location} = this.props;        return (	        <div className={"sidebar-scroll"} style={{backgroundColor: theme.sideBack}}>		        <Menu			        defaultSelectedKeys={[location.pathname]}			        defaultOpenKeys={this.state.keys}			        mode={sidebarOpen ? 'inline' : 'vertical'}			        theme={'dark'}			        style={{backgroundColor: theme.sideBack}}			        inlineCollapsed={!sidebarOpen}			        className={!sidebarOpen && 'collapsed'}              subMenuCloseDelay={0.05}              subMenuOpenDelay={0.1}		        >			        {			        	routes.map( (route) =>					        (!route.hidden &&						        this.renderMenuItem(route, route.path)                  )				        )			        }		        </Menu>	        </div>        )    }}const sidebarConnect = connect(	(state) => ({		routes: state.permission.routes,    sidebarOpen: state.app.sidebarOpen,		theme: state.app.theme	}))export default withRouter(sidebarConnect(Sidebar))