import * as Permits from "./../../config/permits"import asyncRoutes from "./../../router/asyncRouterMap"import constRoutes from "./../../router/constRoutes"import * as ActionTypes from "./../config/actionTypes"import path from "path"/** * @2019/4/24 * @author: huiming * desc:  权限模块 判断用户的 */export default {	state: {		routes: [],		primaryRoutes: []	},	mutations: {		SET_ROUTES: (state, {routes}) => {			// state.addRoutes = routes			console.log(state);			state.routes = routes			return state		},		SET_PRIMARY_ROUTES: (state, {primaryRoutes}) => {			state.primaryRoutes = primaryRoutes			return state		}	},	actions: {		[ActionTypes.GenerateRoutes]: function({ dispatch }, roles) {			return new Promise(resolve => {				let accessedRoutes				if (roles.includes(Permits.admin)) {					accessedRoutes = asyncRoutes				} else {					accessedRoutes = constRoutes.concat(filterAsyncRoutes(asyncRoutes, roles))				}				let primaryRoutes = filterPrimaryRoutesByRoutes(accessedRoutes)				dispatch({type:'SET_ROUTES', routes: accessedRoutes})				dispatch({type: "SET_PRIMARY_ROUTES", primaryRoutes})				resolve(accessedRoutes)			})		}	},}/** * @2019/4/24 * @author: huiming * @params: 当前有的所i有routes * desc:  生成MainRouter需要的Routes */function filterPrimaryRoutesByRoutes(routes) {	let resRoutes = []	routes.filter(route => route.path !== '/login').forEach(route => {		//必须保证 router 只有两层		if(route.children && route.children.length) {			route.children.forEach(subRoute => {				resRoutes.push({					path: path.resolve(route.path, subRoute.path),					component: subRoute.component,					redirect: subRoute.redirect				})			})			resRoutes.push({path: route.path, component: null, noExact: true, redirect: route.redirect})		} else {			resRoutes.push({				path: route.path,				component: route.component,				redirect: route.redirect			})		}	})	return resRoutes}/** * @2019/4/24 * @author: huiming * @params: roles用户的角色数组  route 当前判断的路由 * desc: 判断用户是否有当路由的权限 */function hasPermission(roles, route) {	if (route.meta && route.meta.roles) {		return roles.some(role => route.meta.roles.includes(role))	}	return true}/** * 递归过滤异步路由表，返回符合用户角色权限的路由表 * @param routes asyncRoutes * @param roles */export function filterAsyncRoutes(routes, roles) {	const res = []	routes.forEach(route => {		const tmp = { ...route }		if (hasPermission(roles, tmp)) {			if (tmp.children) {				tmp.children = filterAsyncRoutes(tmp.children, roles)			}			res.push(tmp)		}	})	return res}